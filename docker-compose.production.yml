# Technical Service Assistant - Production Docker Compose
# =====================================================
# Production-optimized configuration with monitoring, security, and scalability

version: '3.8'

networks:
  tsa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  ollama_data_1:
    driver: local
  ollama_data_2:
    driver: local
  ollama_data_3:
    driver: local
  ollama_data_4:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL with pgvector
  pgvector:
    image: pgvector/pgvector:pg16
    container_name: tsa-pgvector
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-vector_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tsa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-vector_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MAX_MEMORY:-2g}
        reservations:
          memory: 512m

  # Ollama Servers (4 instances for load balancing)
  ollama-server-1:
    image: ollama/ollama:latest
    container_name: tsa-ollama-1
    restart: unless-stopped
    volumes:
      - ollama_data_1:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - tsa-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MAX_MEMORY:-4g}
        reservations:
          memory: 1g

  ollama-server-2:
    image: ollama/ollama:latest
    container_name: tsa-ollama-2
    restart: unless-stopped
    volumes:
      - ollama_data_2:/root/.ollama
    ports:
      - "11435:11434"
    networks:
      - tsa-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MAX_MEMORY:-4g}
        reservations:
          memory: 1g

  ollama-server-3:
    image: ollama/ollama:latest
    container_name: tsa-ollama-3
    restart: unless-stopped
    volumes:
      - ollama_data_3:/root/.ollama
    ports:
      - "11436:11434"
    networks:
      - tsa-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MAX_MEMORY:-4g}
        reservations:
          memory: 1g

  ollama-server-4:
    image: ollama/ollama:latest
    container_name: tsa-ollama-4
    restart: unless-stopped
    volumes:
      - ollama_data_4:/root/.ollama
    ports:
      - "11437:11434"
    networks:
      - tsa-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MAX_MEMORY:-4g}
        reservations:
          memory: 1g

  # PDF Processor
  pdf-processor:
    build:
      context: .
      dockerfile: pdf_processor/Dockerfile
    container_name: tsa-pdf-processor
    restart: unless-stopped
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vector_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama-server-1:11434}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-nomic-embed-text:v1.5}
      - UPLOADS_DIR=${UPLOADS_DIR:-/app/uploads}
      - ARCHIVE_DIR=${ARCHIVE_DIR:-/app/uploads/archive}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - POLL_INTERVAL_SECONDS=${POLL_INTERVAL_SECONDS:-60}
    volumes:
      - ${UPLOADS_DIR:-./uploads}:/app/uploads
      - ${LOG_DIR:-./logs}:/app/logs
    networks:
      - tsa-network
    depends_on:
      pgvector:
        condition: service_healthy
      ollama-server-1:
        condition: service_started

  # Reranker API Service
  reranker:
    build:
      context: .
      dockerfile: reranker/Dockerfile
    container_name: tsa-reranker
    restart: unless-stopped
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vector_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - OLLAMA_INSTANCES=${OLLAMA_INSTANCES:-http://ollama-server-1:11434,http://ollama-server-2:11434,http://ollama-server-3:11434,http://ollama-server-4:11434}
      - RERANKER_ENABLED=${RERANKER_ENABLED:-true}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.3}
      - API_KEY=${API_KEY}
      - SEARXNG_URL=${SEARXNG_URL:-http://searxng:8888}
      - ENABLE_HYBRID_SEARCH=${ENABLE_HYBRID_SEARCH:-true}
      - ENABLE_WEB_SEARCH=${ENABLE_WEB_SEARCH:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8008:8008"
    volumes:
      - ${LOG_DIR:-./logs}:/app/logs
    networks:
      - tsa-network
    depends_on:
      pgvector:
        condition: service_healthy
      ollama-server-1:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: ${RERANKER_MAX_MEMORY:-1g}
        reservations:
          memory: 256m

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: tsa-frontend
    restart: unless-stopped
    environment:
      - API_KEY=${API_KEY}
      - RERANKER_URL=http://reranker:8008
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    networks:
      - tsa-network
    depends_on:
      - reranker
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MAX_MEMORY:-512m}
        reservations:
          memory: 128m

  # SearXNG (Privacy-first search engine)
  searxng:
    image: searxng/searxng:latest
    container_name: tsa-searxng
    restart: unless-stopped
    ports:
      - "8888:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./searxng/limiter.toml:/etc/searxng/limiter.toml:ro
    networks:
      - tsa-network
    environment:
      - SEARXNG_BASE_URL=http://localhost:8888/
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 128m

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: tsa-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tsa-network
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 256m

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: tsa-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - tsa-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 128m

  # Performance Monitor
  performance-monitor:
    build:
      context: .
      dockerfile: monitoring/performance_monitor/Dockerfile
    container_name: tsa-performance-monitor
    restart: unless-stopped
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vector_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - OLLAMA_INSTANCES=${OLLAMA_INSTANCES}
      - RERANKER_URL=http://reranker:8008
      - REFRESH_INTERVAL=30
      - EXPORTER_PORT=9109
    ports:
      - "9109:9109"
    networks:
      - tsa-network
    depends_on:
      pgvector:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 64m

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: tsa-nginx
    restart: unless-stopped
    ports:
      - "${EXTERNAL_PORT:-80}:80"
      - "${EXTERNAL_SSL_PORT:-443}:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - tsa-network
    depends_on:
      - frontend
      - reranker
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 64m