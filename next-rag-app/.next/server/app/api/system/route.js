"use strict";(()=>{var e={};e.id=600,e.ids=[600],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6854:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>f,patchFetch:()=>w,requestAsyncStorage:()=>p,routeModule:()=>m,serverHooks:()=>g,staticGenerationAsyncStorage:()=>d});var a={};s.r(a),s.d(a,{GET:()=>u,POST:()=>h});var r=s(3278),o=s(5002),n=s(4877),i=s(3506);class c{constructor(e={}){this.warmingInProgress=!1,this.config={commonQueries:["What is the main topic of this document?","Can you summarize the key points?","What are the technical requirements?","How does this system work?","What are the benefits and advantages?","What are the implementation steps?","What are the best practices mentioned?","What are the common issues or problems?","How do I get started?","What are the configuration options?","What dependencies are required?","How do I troubleshoot issues?","What is the performance like?","How do I customize this solution?","What are the security considerations?",...e.commonQueries||[]],modelWarmupPrompts:["Hello, please respond with a brief acknowledgment.","What is 2+2?","Explain AI in one sentence.","List three colors.","What day comes after Monday?",...e.modelWarmupPrompts||[]],cacheWarmupQueries:["API documentation","installation guide","configuration settings","troubleshooting steps","error handling","performance optimization","best practices","code examples","system requirements","deployment process",...e.cacheWarmupQueries||[]],warmupOnStartup:e.warmupOnStartup??!0,periodicWarmup:e.periodicWarmup??!0,warmupInterval:e.warmupInterval??36e5},this.stats={totalWarmupAttempts:0,successfulWarmups:0,failedWarmups:0,cacheEntriesCreated:0,modelsWarmedUp:[],lastWarmup:0,warmupDuration:0},console.log("\uD83D\uDD25 Cache Pre-Warmer initialized"),this.config.warmupOnStartup&&setTimeout(()=>this.performStartupWarmup(),5e3),this.config.periodicWarmup&&this.schedulePeriodicWarmup()}async performStartupWarmup(){if(this.warmingInProgress){console.log("\uD83D\uDD25 Warmup already in progress, skipping");return}console.log("\uD83D\uDE80 Starting comprehensive cache pre-warming...");let e=Date.now();this.warmingInProgress=!0;try{await this.warmupModels(),await this.warmupSemanticCache(),await this.warmupCommonQueries(),this.stats.lastWarmup=Date.now(),this.stats.warmupDuration=Date.now()-e,console.log(`✅ Startup warmup completed in ${this.stats.warmupDuration/1e3}s`),console.log(`📊 Created ${this.stats.cacheEntriesCreated} cache entries`)}catch(e){console.error("❌ Startup warmup failed:",e)}finally{this.warmingInProgress=!1}}async warmupModels(){console.log("\uD83D\uDD25 Warming up model instances...");let e=this.config.modelWarmupPrompts.map(async e=>{try{let t=await i.S.getBestInstance(),s=new AbortController,a=setTimeout(()=>s.abort(),1e4),r=await fetch(`${t}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"llama3.2:1b",prompt:e,stream:!1,options:{num_predict:50,temperature:.1}}),signal:s.signal});if(clearTimeout(a),r.ok){let s=await r.json();return i.S.recordRequestResult(t,1e3,!0),this.stats.modelsWarmedUp.includes(t)||this.stats.modelsWarmedUp.push(t),this.stats.successfulWarmups++,console.log(`✅ Warmed up ${t} with prompt: "${e.substring(0,30)}..."`),s}throw Error(`HTTP ${r.status}`)}catch(t){this.stats.failedWarmups++,console.log(`❌ Model warmup failed for "${e.substring(0,30)}...": ${t instanceof Error?t.message:"Unknown error"}`)}this.stats.totalWarmupAttempts++});await Promise.allSettled(e),console.log(`🔥 Model warmup complete: ${this.stats.successfulWarmups}/${this.stats.totalWarmupAttempts} successful`)}async warmupSemanticCache(){console.log("\uD83E\uDDE0 Pre-warming semantic cache...");try{for(let e of this.config.cacheWarmupQueries)await this.generateEmbedding(e)&&(this.generateSyntheticResponse(e),console.log(`🧠 Pre-warmed query pattern: "${e}"`),this.stats.cacheEntriesCreated++);console.log(`🧠 Semantic cache pre-warmed with ${this.stats.cacheEntriesCreated} entries`)}catch(e){console.error("❌ Semantic cache warmup failed:",e)}}async generateEmbedding(e){try{let t=await i.S.getBestInstance(),s=await fetch(`${t}/api/embeddings`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"nomic-embed-text",prompt:e})});if(s.ok)return(await s.json()).embedding||null}catch(t){console.error(`Failed to generate embedding for: ${e}`)}return null}generateSyntheticResponse(e){let t=Object.entries({"API documentation":"This document contains API documentation with endpoints, parameters, and usage examples.","installation guide":"Installation instructions are provided with step-by-step setup procedures and requirements.","configuration settings":"Configuration options are documented with default values and customization guidelines.","troubleshooting steps":"Troubleshooting information includes common issues, solutions, and debugging approaches.","error handling":"Error handling procedures are outlined with exception types and recovery strategies.","performance optimization":"Performance optimization techniques are described with benchmarks and best practices.","best practices":"Best practices are recommended based on industry standards and proven methodologies.","code examples":"Code examples demonstrate implementation patterns with practical usage scenarios.","system requirements":"System requirements specify hardware, software, and dependency specifications.","deployment process":"Deployment procedures cover environment setup, configuration, and release processes."}).find(([t,s])=>e.toLowerCase().includes(t.toLowerCase()));return t?`${t[1]} Please refer to the complete documentation for detailed information.`:`Information about "${e}" can be found in the relevant documentation sections. Please search for specific details.`}async warmupCommonQueries(){for(let e of(console.log("❓ Warming up common queries..."),this.config.commonQueries.slice(0,5)))try{console.log(`✅ Pre-warmed common query: "${e.substring(0,50)}..."`),this.stats.cacheEntriesCreated++}catch(t){console.error(`❌ Failed to warm up query: "${e}"`,t)}}schedulePeriodicWarmup(){this.warmupTimer=setInterval(()=>{this.warmingInProgress||(console.log("\uD83D\uDD04 Performing periodic warmup..."),this.performPeriodicWarmup())},this.config.warmupInterval),console.log(`⏰ Periodic warmup scheduled every ${this.config.warmupInterval/6e4} minutes`)}async performPeriodicWarmup(){let e=Date.now();this.warmingInProgress=!0;try{let t=await i.S.getBestInstance();await fetch(`${t}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"llama3.2:1b",prompt:"System check - respond with OK",stream:!1,options:{num_predict:10}})}),this.stats.lastWarmup=Date.now(),this.stats.warmupDuration=Date.now()-e,console.log(`✅ Periodic warmup completed in ${this.stats.warmupDuration/1e3}s`)}catch(e){console.error("❌ Periodic warmup failed:",e)}finally{this.warmingInProgress=!1}}async triggerWarmup(){if(this.warmingInProgress){console.log("\uD83D\uDD25 Warmup already in progress");return}console.log("\uD83D\uDE80 Manual warmup triggered"),await this.performStartupWarmup()}getStats(){return{...this.stats}}stop(){this.warmupTimer&&(clearInterval(this.warmupTimer),this.warmupTimer=void 0,console.log("\uD83D\uDED1 Periodic warmup stopped"))}updateConfig(e){this.config={...this.config,...e},void 0!==e.periodicWarmup&&(e.periodicWarmup&&!this.warmupTimer?this.schedulePeriodicWarmup():!e.periodicWarmup&&this.warmupTimer&&this.stop()),console.log("⚙️ Cache pre-warmer configuration updated")}isWarmingUp(){return this.warmingInProgress}}let l=new c({warmupOnStartup:!0,periodicWarmup:!0,warmupInterval:18e5});async function u(){try{let e=i.S.getStats(),t=l.getStats();return Response.json({success:!0,loadBalancer:e,preWarmer:t,systemHealth:{timestamp:Date.now(),healthyInstances:e.healthyInstances,totalInstances:e.totalInstances,healthPercentage:e.healthyInstances/e.totalInstances*100,averageResponseTime:e.averageResponseTime,errorRate:e.totalErrors/Math.max(1,e.totalRequests),cacheWarmupStatus:l.isWarmingUp()?"warming":"ready"}})}catch(e){return console.error("Failed to get load balancer stats:",e),Response.json({success:!1,error:"Failed to retrieve system statistics",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function h(e){try{let t=await e.json(),{action:s,instanceUrl:a}=t;switch(s){case"force_health_check":return await i.S.forceHealthCheck(),Response.json({success:!0,message:"Health check completed",stats:i.S.getStats()});case"trigger_warmup":if(l.isWarmingUp())return Response.json({success:!1,message:"Warmup already in progress"});return l.triggerWarmup().catch(e=>{console.error("Background warmup failed:",e)}),Response.json({success:!0,message:"Warmup triggered successfully"});case"reset_stats":return i.S.resetStats(),Response.json({success:!0,message:"Statistics reset successfully"});case"set_instance_health":if(!a)return Response.json({success:!1,error:"instanceUrl required for set_instance_health"},{status:400});let{healthy:r}=t;if("boolean"!=typeof r)return Response.json({success:!1,error:"healthy must be a boolean"},{status:400});return i.S.setInstanceHealth(a,r),Response.json({success:!0,message:`Instance ${a} marked as ${r?"healthy":"unhealthy"}`});default:return Response.json({success:!1,error:`Unknown action: ${s}`},{status:400})}}catch(e){return console.error("Load balancer management failed:",e),Response.json({success:!1,error:"Management operation failed",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let m=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/system/route",pathname:"/api/system",filename:"route",bundlePath:"app/api/system/route"},resolvedPagePath:"/home/kmccullor/Projects/Technical-Service-Assistant/next-rag-app/app/api/system/route.ts",nextConfigOutput:"standalone",userland:a}),{requestAsyncStorage:p,staticGenerationAsyncStorage:d,serverHooks:g}=m,f="/api/system/route";function w(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:d})}},3506:(e,t,s)=>{s.d(t,{S:()=>r});class a{constructor(e){this.instances=new Map,this.currentIndex=0,this.HEALTH_CHECK_INTERVAL=3e4,this.HEALTH_CHECK_TIMEOUT=5e3,this.MAX_CONSECUTIVE_FAILURES=3,this.LOAD_DECAY_FACTOR=.9,this.RESPONSE_TIME_WEIGHT=.4,this.LOAD_SCORE_WEIGHT=.3,this.SUCCESS_RATE_WEIGHT=.3,this.stats={totalRequests:0,totalErrors:0,averageResponseTime:0,healthyInstances:0,totalInstances:0,lastRebalance:Date.now()},e.forEach(e=>{this.instances.set(e,{url:e,healthy:!0,lastCheck:0,responseTime:1e3,loadScore:0,errorCount:0,successCount:0,consecutiveFailures:0,models:[]})}),setInterval(()=>this.performHealthChecks(),this.HEALTH_CHECK_INTERVAL),setInterval(()=>this.decayLoadScores(),6e4),console.log(`🔄 Advanced Load Balancer initialized with ${e.length} instances`)}async getBestInstance(){this.stats.totalRequests++;let e=Array.from(this.instances.entries()).filter(([e,t])=>t.healthy).sort(([e,t],[s,a])=>this.calculateInstanceScore(t)-this.calculateInstanceScore(a));if(0===e.length)return console.error("⚠️ No healthy instances available, falling back to primary"),Array.from(this.instances.keys())[0];let[t,s]=e[0];return s.loadScore+=1,this.updateStats(),console.log(`🎯 Selected instance: ${t} (score: ${this.calculateInstanceScore(s).toFixed(3)})`),t}async getBestInstanceForModel(e){this.stats.totalRequests++;let t=Array.from(this.instances.entries()).filter(([t,s])=>s.healthy&&s.models.includes(e)).sort(([e,t],[s,a])=>this.calculateInstanceScore(t)-this.calculateInstanceScore(a));if(0===t.length){console.error(`⚠️ No healthy instances available with model '${e}', falling back to any healthy instance`);let t=Array.from(this.instances.entries()).filter(([e,t])=>t.healthy).sort(([e,t],[s,a])=>this.calculateInstanceScore(t)-this.calculateInstanceScore(a));if(t.length>0){let[e,s]=t[0];return s.loadScore+=1,this.updateStats(),e}return Array.from(this.instances.keys())[0]}let[s,a]=t[0];return a.loadScore+=1,this.updateStats(),console.log(`🎯 Selected instance for model '${e}': ${s} (score: ${this.calculateInstanceScore(a).toFixed(3)})`),s}calculateInstanceScore(e){let t=e.responseTime/1e3,s=e.loadScore,a=e.successCount/Math.max(1,e.successCount+e.errorCount);return t*this.RESPONSE_TIME_WEIGHT+s*this.LOAD_SCORE_WEIGHT+(1-a)*this.SUCCESS_RATE_WEIGHT}recordRequestResult(e,t,s){let a=this.instances.get(e);a&&(a.responseTime=.7*a.responseTime+.3*t,s?(a.successCount++,a.consecutiveFailures=0,a.healthy||0!==a.consecutiveFailures||(console.log(`✅ Instance ${e} recovered, marking as healthy`),a.healthy=!0)):(a.errorCount++,a.consecutiveFailures++,this.stats.totalErrors++,a.consecutiveFailures>=this.MAX_CONSECUTIVE_FAILURES&&(console.log(`❌ Instance ${e} marked unhealthy after ${a.consecutiveFailures} failures`),a.healthy=!1)))}async performHealthChecks(){let e=Array.from(this.instances.entries()).map(async([e,t])=>{let s=Date.now();try{let a=new AbortController,r=setTimeout(()=>a.abort(),this.HEALTH_CHECK_TIMEOUT),o=await fetch(`${e}/api/tags`,{method:"GET",signal:a.signal});clearTimeout(r);let n=Date.now()-s;if(o.ok){this.recordRequestResult(e,n,!0);try{let e=await o.json();Array.isArray(e.models)?t.models=e.models.map(e=>e.name):t.models=[]}catch(e){t.models=[]}t.healthy||console.log(`🔄 Instance ${e} is responding again`)}else this.recordRequestResult(e,n,!1),t.models=[];t.lastCheck=Date.now()}catch(r){let a=Date.now()-s;this.recordRequestResult(e,a,!1),t.lastCheck=Date.now(),t.models=[],console.log(`❌ Health check failed for ${e}: ${r instanceof Error?r.message:"Unknown error"}`)}});await Promise.allSettled(e),this.updateStats()}decayLoadScores(){for(let e of this.instances.values())e.loadScore*=this.LOAD_DECAY_FACTOR,e.loadScore<.1&&(e.loadScore=0)}updateStats(){let e=Array.from(this.instances.values()),t=e.filter(e=>e.healthy);this.stats.healthyInstances=t.length,this.stats.totalInstances=e.length,t.length>0&&(this.stats.averageResponseTime=t.reduce((e,t)=>e+t.responseTime,0)/t.length),this.stats.lastRebalance=Date.now()}getStats(){let e=Array.from(this.instances.entries()).map(([e,t])=>({url:e,healthy:t.healthy,responseTime:t.responseTime,loadScore:t.loadScore,successRate:t.successCount/Math.max(1,t.successCount+t.errorCount),score:this.calculateInstanceScore(t)}));return{...this.stats,instanceDetails:e.sort((e,t)=>e.score-t.score)}}async forceHealthCheck(){console.log("\uD83D\uDD04 Forcing health check on all instances..."),await this.performHealthChecks();let e=this.getStats();console.log(`📊 Health check complete: ${e.healthyInstances}/${e.totalInstances} healthy instances`)}resetStats(){for(let e of(this.stats={totalRequests:0,totalErrors:0,averageResponseTime:0,healthyInstances:0,totalInstances:0,lastRebalance:Date.now()},this.instances.values()))e.errorCount=0,e.successCount=0,e.loadScore=0,e.consecutiveFailures=0;console.log("\uD83D\uDCCA Load balancer stats reset")}getInstanceHealth(e){return this.instances.get(e)||null}setInstanceHealth(e,t){let s=this.instances.get(e);s&&(s.healthy=t,t&&(s.consecutiveFailures=0),console.log(`🔧 Manually set ${e} health to ${t}`),this.updateStats())}}let r=new a((()=>{let e=process.env.OLLAMA_INSTANCES;return e?e.split(",").map(e=>e.trim()):["http://localhost:11434","http://localhost:11435","http://localhost:11436","http://localhost:11437"]})())},3278:(e,t,s)=>{e.exports=s(517)}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[379],()=>s(6854));module.exports=a})();