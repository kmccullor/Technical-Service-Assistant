name: Code Quality and Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run pre-commit hooks
        run: |
          pre-commit install
          # Run pre-commit excluding archival and experimental directories
          git ls-files | grep -Ev '^(backup/|experiments/)' | xargs -r pre-commit run --files
          
      - name: Run type checking with mypy
        run: |
          # Type check excluding backup snapshots
          mypy . --config-file mypy.ini --exclude 'backup/'
          
      - name: Run security scanning with bandit
        run: |
          bandit -r . -f json -o bandit-report.json
          cat bandit-report.json
        continue-on-error: true
        
      - name: Check for security vulnerabilities
        run: |
          safety check --json --output safety-report.json
          cat safety-report.json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --cov=. --cov-report=xml --cov-report=html
          
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-unit
          path: |
            coverage.xml
            htmlcov/

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
      - name: Set up test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          # Initialize test database schema
          psql $DATABASE_URL -f init.sql
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          OLLAMA_BASE_URL: http://mock-ollama:11434
        run: |
          pytest tests/integration/ -v --tb=short -m "not slow"
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: pytest-integration-results.xml

  # End-to-End Tests (optional, run on main branch only)
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Start services with Docker Compose
        run: |
          # Create minimal docker-compose for testing
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to start
          
      - name: Run end-to-end tests
        run: |
          pytest tests/e2e/ -v --tb=short -m "not slow"
          
      - name: Cleanup services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Build and Package (optional)
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Build Docker images
        run: |
          docker build -t technical-service-assistant:${{ github.sha }} .
          docker build -t technical-service-assistant:latest .
          
      - name: Run container smoke test
        run: |
          # Start container and test basic functionality
          docker run -d --name test-container technical-service-assistant:latest
          sleep 10
          # Add basic health check
          docker logs test-container
          docker stop test-container
          docker rm test-container
          
      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save technical-service-assistant:latest | gzip > technical-service-assistant.tar.gz
          
      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: technical-service-assistant.tar.gz

  # Deployment preparation (if needed)
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate deployment manifest
        run: |
          echo "Deployment ready for commit: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"
          echo "Tests passed: Unit, Integration, E2E"
          echo "Quality checks: Passed"
          echo "Security scan: Completed"
        
      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << EOF
          # Deployment Summary
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Timestamp:** $(date -u)
          
          ## Quality Gates Passed
          - ✅ Code formatting (Black, isort)
          - ✅ Type checking (mypy)
          - ✅ Security scanning (bandit, safety)
          - ✅ Unit tests
          - ✅ Integration tests
          - ✅ End-to-end tests
          
          ## Artifacts Generated
          - Docker image: technical-service-assistant:${{ github.sha }}
          - Test coverage reports
          - Security scan reports
          EOF
        
      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md