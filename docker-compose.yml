services:
  pgvector:
    image: pgvector/pgvector:pg16
    container_name: pgvector
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vector_db
    ports:
      - "5432:5432"
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for response caching
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Server Ollama containers for parallel testing
  ollama-server-1:
    image: ollama/ollama
    container_name: ollama-server-1
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data_1:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 && echo 'server:idle' || (echo 'server:starting' && exit 1)"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  ollama-server-2:
    image: ollama/ollama
    container_name: ollama-server-2
    restart: unless-stopped
    ports:
      - "11435:11434"
    volumes:
      - ollama_data_2:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 && echo 'server:idle' || (echo 'server:starting' && exit 1)"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  ollama-server-3:
    image: ollama/ollama
    container_name: ollama-server-3
    restart: unless-stopped
    ports:
      - "11436:11434"
    volumes:
      - ollama_data_3:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 && echo 'server:idle' || (echo 'server:starting' && exit 1)"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  ollama-server-4:
    image: ollama/ollama
    container_name: ollama-server-4
    restart: unless-stopped
    ports:
      - "11437:11434"
    volumes:
      - ollama_data_4:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 && echo 'server:idle' || (echo 'server:starting' && exit 1)"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  reranker:
    build:
      context: .
      dockerfile: reranker/Dockerfile
    container_name: reranker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    ports:
      - "8008:8008"
      - "9092:9091"  # Prometheus metrics port
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=vector_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - LOG_LEVEL=DEBUG
      - OLLAMA_URL=http://ollama-server-1:11434
      - EMBEDDING_MODEL=nomic-embed-text
      - CHAT_MODEL=mistral:7B
      - RERANK_MODEL=BAAI/bge-reranker-base
      - SMTP_HOST=${SMTP_HOST:-host.docker.internal}
      - SMTP_PORT=${SMTP_PORT:-25}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-false}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - VERIFICATION_EMAIL_SENDER=${VERIFICATION_EMAIL_SENDER:-no-reply@technical-service-assistant.local}
      - VERIFICATION_EMAIL_SUBJECT=${VERIFICATION_EMAIL_SUBJECT:-Verify your Technical Service Assistant account}
      - VERIFICATION_EMAIL_LINK_BASE=${VERIFICATION_EMAIL_LINK_BASE:-http://localhost:3000/verify-email}
      - PASSWORD_RESET_EMAIL_SENDER=${PASSWORD_RESET_EMAIL_SENDER:-no-reply@technical-service-assistant.local}
      - PASSWORD_RESET_EMAIL_SUBJECT=${PASSWORD_RESET_EMAIL_SUBJECT:-Reset your Technical Service Assistant password}
      - PASSWORD_RESET_EMAIL_LINK_BASE=${PASSWORD_RESET_EMAIL_LINK_BASE:-http://localhost:3000/reset-password}
    depends_on:
      - pgvector
      - ollama-server-1
    volumes:
      - temp_uploads:/app/temp-uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8008/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  docling_processor:
    build:
      context: .
      dockerfile: docling_processor/Dockerfile
    container_name: docling_processor
    restart: always
    ports:
      - "9110:9110"
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=vector_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - UPLOADS_DIR=/app/uploads
      - ARCHIVE_DIR=/app/archive
      - POLL_INTERVAL_SECONDS=60
      - LOG_DIR=/app/logs
      # PyTorch CPU-only optimizations
      - PYTORCH_DISABLE_CUDNN_CACHE=1
      - OMP_NUM_THREADS=4
      - TOKENIZERS_PARALLELISM=false
      - DOCLING_SKIP_DOCKER_CHECK=1
      - DOCLING_DEVICE=cpu
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./archive:/app/archive
    command: ["python3", "docling_processor/docling_processor.py"]
    depends_on:
      - pgvector
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Unified Frontend Application (renamed from legacy 'rag-app')
  technical-service-assistant:
    build: ./next-rag-app
    container_name: technical-service-assistant
    restart: unless-stopped
    environment:
      # Database - Connect to pgvector container
      - DATABASE_URL=postgresql://postgres:postgres@pgvector:5432/vector_db
      
      # Local AI Models - Connect to Ollama containers
      - USE_LOCAL_MODELS=true
      - OLLAMA_BASE_URL=http://ollama-server-1:11434
      - OLLAMA_INSTANCES=http://ollama-server-1:11434,http://ollama-server-2:11434,http://ollama-server-3:11434,http://ollama-server-4:11434
      - EMBEDDING_MODEL=nomic-embed-text:v1.5
      - CHAT_MODEL=mistral:7b
      
      # App Configuration - RAG Performance Optimized
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=http://RNI-LLM-01.lab.sensus.net:3000
      - RERANKER_ENABLED=true
      - CONFIDENCE_THRESHOLD=0.2
      - VECTOR_WEIGHT=0.6
      - LEXICAL_WEIGHT=0.4
      - MAX_TOKENS=1024
      - TEMPERATURE=0.3
      - WEB_SEARCH_ENABLED=false
      - CACHE_TTL=3600
      - OLLAMA_TIMEOUT=30000
      - REQUEST_TIMEOUT=45000
      
      # Web Search Configuration (Reranker)
      - RERANKER_BASE_URL=http://reranker:8008
      - USE_RERANKER_WEBSEARCH=true
      
      # Performance & Caching
      - REDIS_URL=redis://redis:6379
      
      # Disabled External Services (using local only)
      - COHERE_API_KEY=disabled-using-local
      - TAVILY_API_KEY=disabled-using-local
      - SERP_API_KEY=disabled-using-local
      - LANGFUSE_PUBLIC_KEY=disabled-using-local
      - LANGFUSE_SECRET_KEY=disabled-using-local
      
    ports:
      - "3000:3000"
    depends_on:
      - pgvector
      - redis
      - ollama-server-1
      - ollama-server-2
      - ollama-server-3
      - ollama-server-4
      - reranker
    volumes:
      - ./uploads:/app/uploads
      - temp_uploads:/app/temp-uploads
    labels:
      com.project.name: "technical-service-assistant"
      com.project.component: "frontend"
      com.project.migration_note: "Renamed from rag-app on 2025-10-05"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - technical-service-assistant_default

  # Reasoning engine (initial lightweight service exposing advanced orchestration APIs)
  reasoning-engine:
    build:
      context: .
      dockerfile: reasoning_engine/Dockerfile
    container_name: reasoning-engine
    restart: unless-stopped
    environment:
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=vector_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - OLLAMA_INSTANCES=http://ollama-server-1:11434,http://ollama-server-2:11434,http://ollama-server-3:11434,http://ollama-server-4:11434
      - EMBEDDING_MODEL=nomic-embed-text:v1.5
      - LOG_LEVEL=info
    depends_on:
      - pgvector
      - ollama-server-1
    ports:
      - "8050:8050"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8050/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - technical-service-assistant_default

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana visualization service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=RNI-LLM-01.lab.sensus.net
      - GF_SMTP_ENABLED=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-amazonprometheus-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama-exporter:
    build: ./monitoring/ollama_exporter
    container_name: ollama-exporter
    restart: unless-stopped
    environment:
      - OLLAMA_TARGETS=http://ollama-server-1:11434,http://ollama-server-2:11434,http://ollama-server-3:11434,http://ollama-server-4:11434
      - EXPORTER_PORT=9105
      - REQUEST_TIMEOUT=2
      - CACHE_TTL=5
    depends_on:
      - ollama-server-1
      - ollama-server-2
      - ollama-server-3
      - ollama-server-4
    ports:
      - "9105:9105"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9105/metrics >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@pgvector:5432/vector_db?sslmode=disable"
    command:
      - "--config.file=/dev/null"
      - "--log.level=error"
    ports:
      - "9187:9187"
    volumes:
      - ./monitoring/postgres_exporter.yml:/postgres_exporter.yml:ro
    depends_on:
      - pgvector
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis exporter for cache metrics  
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "/redis_exporter", "--version"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Node exporter for host system metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    restart: unless-stopped
    # Expose only to compose network; Prometheus should scrape via service name
    # (Removes docker-proxy layer that may be contributing to resets.)
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      # Disable exporter self-metrics and some high-churn collectors to reduce payload size
      - '--web.disable-exporter-metrics'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      # Narrow collectors to core system only (can re-enable incrementally)
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.filesystem'
      - '--collector.loadavg'
      - '--collector.time'
      - '--collector.uname'
      - '--collector.stat'
    healthcheck:
      # Use full GET request instead of --spider (HEAD) which caused node-exporter to log
      # repeated 'error encoding and sending metric family: connection reset by peer'
      # as it attempted to stream the body to a client that closed after headers.
      test: ["CMD-SHELL", "wget -q -O - http://localhost:9100/metrics > /dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Performance monitor exporter (aggregates application + DB health)
  performance-monitor:
    build:
      context: .
      dockerfile: monitoring/performance_monitor/Dockerfile
    container_name: performance-monitor
    restart: unless-stopped
    environment:
      - EXPORTER=1
      - EXPORTER_PORT=9109
      - POLL_INTERVAL=60
      - DB_HOST=pgvector
      - DB_PORT=5432
      - DB_NAME=vector_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      - pgvector
      - reranker
    ports:
      - "9109:9109"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9109/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Alertmanager for routing Prometheus alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgvector_data:
  n8n_data:
  ollama_data_1:
  ollama_data_2:
  ollama_data_3:
  ollama_data_4:
  reranker_data:
  redis_data:
  temp_uploads:
  prometheus_data:
  grafana_data:

networks:
  technical-service-assistant_default:
    external: true
